# -*- coding: utf-8 -*-
"""2021S - Suggest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1faxbQntZFa-PK356A7Vs9nk0XHFSnh0k

# 1. Data

We prepared a dataset with 500 research paper titles. Some of them have common prefixes, which make them a good sandbox for suggest testing. Below you will find base64-encoded dataset, and a code to decode and uncompress it. You may hardcode a dataset into your solutions - `codetest` has 32KB limit on source file, this code "eats" only 16KB.
"""

compressed = ""
import zlib, base64
unbase = base64.b64decode(compressed)
raw = str(zlib.decompress(unbase), encoding='ascii')
dataset = raw.split('\n')

# print(len(dataset))
# print("Sample:", dataset[50:60])

"""# 2. Problems

**NB** Solve **2.1. only by midnight to get 2 points** for the contest (this will allow you to pass some tests, 4 or maybe more). To get **5 points solve in the class as mush as you can.** Solving additional tasks will allow you to pass more tests in codetest.

## 2.1. Base problem (for 2 points)

Implement Trie-based index search. Refer to [homework, section 2.0.1.](https://github.com/IUCVLab/information-retrieval/blob/main/templates/2021B2/2021S2-1314%20Language%20Models%20and%20Suggest.ipynb) or to [pygtrie documentation](https://github.com/google/pygtrie) directly.

- add the code from the cell above to read the dataset.
- Here and later read from `input.txt`.
- Here and later **ignore case**.
- Here and later consider **space** as word separator. If there is a punctuation mark, it just goes together with the word (`one two BLA, And three` is `['one', 'two', 'bla,', 'and', 'three']`).
- Here and later print exact suggested titles, not their preprocessed (e.g. lower case) versions.
- Here and later print sorted list of titles to `output.txt`, one per row.
- Here and later we consider only full word tests in a query, thus you should not specifically care if query is a subword: do not suggest `Three elephants` for `hant`.
- We suggest to use `CharTrie` class from `import pygtrie`.
"""

#!pip install pygtrie
import pygtrie as trie
stops = set('a on at of to is from for and with using the in &'.split())

t = trie.CharTrie()
for element in dataset:
  e = element.lower()
  for s in stops:
    e = e.replace(" "+s+" "," ")
  e = e.replace('a ',"")
  e = e.replace('the ',"")
  e = e.replace(" ",'/')
  e = e.replace('//',"/")
  t.update({e:element})

with open('input.txt', 'r') as fin:
  query = fin.read().lower()
  for s in stops:
    query = query.replace(" "+s+" "," ")
  query = query.replace('a ',"")
  query = query.replace('the ',"")
  query = query.replace(" ",'/')
  query = query.replace('//',"/")

print(query)

r = sorted(t[query:])
print(len(r),r)
with open('output.txt','w') as fout:
  for res in r:
    fout.write(res+'\n')

"""## 2.2. Omit stopwords in trie

For a given list of stopwords, don't consider them in **both index and queries**.

Skip `a on at of to is from for and with using the in &`
"""

#stops = set('a on at of to is from for and with using the in &'.split())

"""## 2.3. What if query is in the middle?

Modify your code to suggest titles even if query is found **in the middle** of a title. Think about, which techniques you can borrow from our previous classes, e.g. about wildcard search.

E.g. `Semantic Parsing` in 

```
3DCNN-DQN-RNN: A Deep Reinforcement Learning Framework for Semantic Parsing of Large-scale 3D Point Clouds
                                                           ~~~~~~~~~~~~~~~~
```

**NB**: Please extend you trie-based approach. Even if using `in` and regexp can give you same result, this is not a scalable approach, which we will not accept.

## 2.4. What about typos?

**Important**: 
- all queries consist of full words (for simplisity). 
- There can be typos.

Implement **query typo fixing** to propose articles even with mistakes.
Use [pyspellchecker](https://pypi.org/project/pyspellchecker/) `candidates()` call to make our solutions uniform.
"""

#!pip install pyspellchecker